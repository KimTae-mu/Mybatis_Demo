<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--
    mapper接口代理实现编写规则：
       1.映射文件中namespace要等于接口的全路径名称
       2.映射文件中的sql语句id要等于接口的方法名称
       3.映射文件中传入参数类型要等于接口方法的传入参数类型
       4.映射文件中返回结果集类型要等于接口方法的返回值类型
-->
<mapper namespace="com.tae.old.UserMapper">

    <!--封装sql条件，封装后可以重用
        id：是这个sql条件的唯一标识
    -->
    <sql id="user_Where">
        <!--
            where标签的作用：
                1.会自动向sql语句中添加where关键字
                2.会自动去掉第一个条件的and关键字
        -->
        <where>
            <if test="username != null and username != ''">
                AND username LIKE '%${username}%'
            </if>
            <if test="sex != null and sex != ''">
                AND sex=#{sex}
            </if>
        </where>
    </sql>
    <!--
            id:sql语句唯一标识
            parameterType:指定传入参数类型
            resultType:返回结果集类型
            #{}:占位符，起到占位作用，如果传入的是基本类型(string ,long,double,int,boolean,float等),那么#{}中的变量名称可以随意些，
        -->
    <select id="findUserById" parameterType="java.lang.Integer" resultType="user">
        SELECT * FROM  user WHERE id=#{id}
    </select>

    <!--如果返回结果为集合，可以调用selectList方法，这个方法返回的结果就是一个集合，所以映射文件中应该配置成集合泛型的类型
        ${}:拼接符，字符串原样拼接，如果传入的参数是基本类型，那么${}中的变量名称必须是value
        注意：拼接符有sql注入的风险，所以谨慎使用
    -->
    <select id="findUserByUserName" parameterType="java.lang.String" resultType="com.tae.old.User">
        SELECT * FROM user WHERE username like '%${value}%'
    </select>

    <!--#{}:如果传入的是pojo类型，那么#{}中的变量名称必须是pojo中对应的属性.属性.属性-
            如果要返回数据库自增主键：可以使用select LAST_INSERT_ID()
    -->
    <insert id="insertUser" parameterType="com.tae.old.User">
        <!--执行select LAST_INSERT_ID()数据库函数，返回自增的主键
          keyProperty:将返回的主键传入参数的id中保存
          order:当前函数相对于insert语句的执行顺序，在insert前执行是before，在insert后执行是after
          resultType:id的类型，也就是keyProperties中属性的类型
        -->
        <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
            select LAST_INSERT_ID()
        </selectKey>
        INSERT INTO user (username,birthday,sex,address) VALUES(#{username},#{birthday},#{sex},#{address})
    </insert>
    
    <select id="findUserbyVo" parameterType="com.tae.old.QueryVo" resultType="com.tae.old.User">
        SELECT * FROM user WHERE username LIKE '%${user.username}%' AND sex=#{user.sex}
    </select>

    <!--只有返回结果为一行一列的时候，那么返回值的类型才可以指定成基本数据类型-->
    <select id="findUserCount" resultType="java.lang.Integer">
        SELECT COUNT(*) FROM user;
    </select>
    
    <select id="findUserByUsernameAndSex" parameterType="com.tae.old.User" resultType="com.tae.old.User">
        SELECT * FROM user
        <!--调用sql条件-->
        <include refid="user_Where"></include>
    </select>
    
    <select id="findUserByIds" parameterType="com.tae.old.QueryVo" resultType="com.tae.old.User">
        SELECT * FROM user
        <where>
            <if test="ids != null">
                <!--foreach：循环传入的集合参数
                        collection：传入的集合的变量名称
                        item：每次循环将循环出的数据放入这个变量中
                        open：循环开始拼接的字符串
                        close：循环结束拼接的字符串
                        separator：循环中拼接的分隔符
                -->
                <foreach collection="ids" item="id" open="id in (" close=")" separator=",">
                    #{id}
                </foreach>
            </if>
        </where>
    </select>
    
    <!--一对一：自动映射
            创建一个新的pojo，包含所想要包含的属性
    -->
    <!--一对一：手动映射-->
    <!--id:resultMap的唯一标识
        type:将查询出的数据放入这个指定的对象中
        注意：手动映射需要指定数据库中表的字段名与java中pojo类的属性名称的对应关系
    -->
    <resultMap id="orderAndUserResultMap" type="com.tae.old.Orders">
        <!--id标签指定主键字段对应关系
            column：列，数据库中的字段名称
            property：属性，java中pojo中的属性名称
        -->
        <id column="id" property="id"/>
        <!--result标签指定非主键列的对应关系-->
        <result column="user_id" property="userId"/>
        <result column="number" property="number"/>
        <result column="createtime" property="createtime"/>
        <result column="note" property="note"/>

        <!--这个标签指定单个对象的对应关系
                property：指定将数据放入Orders中的user属性中
                javaType：user属性的类型
        -->
        <association property="user" javaType="com.tae.old.User">
            <id column="uid" property="id"/>
            <result column="username" property="username"/>
            <result column="birthday" property="birthday"/>
            <result column="sex" property="sex"/>
            <result column="address" property="address"/>
        </association>
    </resultMap>
    <select id="findOrdersAndUser2" resultMap="orderAndUserResultMap">
        SELECT a.*,b.id uid,username,birthday,sex,address
        FROM orders a,user b
        WHERE a.user_id = b.id
    </select>
    
    <resultMap id="userAndOrdersResultMap" type="com.tae.old.User">
        <id column="id" property="id"/>
        <result column="username" property="username"/>
        <result column="birthday" property="birthday"/>
        <result column="sex" property="sex"/>
        <result column="address" property="address"/>

        <!--指定对应的集合对象关系映射
                property：将数据放入User对象中的ordersList属性中
                ofType：指定ordersList属性的泛型类型
        -->
        <collection property="ordersList" ofType="com.tae.old.Orders">
            <id column="oid" property="id"/>
            <result column="user_id" property="userId"/>
            <result column="number" property="number"/>
            <result column="createtime" property="createtime"/>
        </collection>
    </resultMap>
    <select id="findUserAndOrders" resultMap="userAndOrdersResultMap">
        SELECT a.*,b.id oid,user_id,number,createtime
        FROM user a,orders b WHERE a.id = b.user_id
    </select>
</mapper>