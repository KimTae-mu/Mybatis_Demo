<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="test">

    <!--
        id:sql语句唯一标识
        parameterType:指定传入参数类型
        resultType:返回结果集类型
        #{}:占位符，起到占位作用，如果传入的是基本类型(string ,long,double,int,boolean,float等),那么#{}中的变量名称可以随意些，
    -->
    <select id="findUserById" parameterType="java.lang.Integer" resultType="com.tae.old.User">
        SELECT * FROM  user WHERE id=#{id}
    </select>

    <!--如果返回结果为集合，可以调用selectList方法，这个方法返回的结果就是一个集合，所以映射文件中应该配置成集合泛型的类型
        ${}:拼接符，字符串原样拼接，如果传入的参数是基本类型，那么${}中的变量名称必须是value
        注意：拼接符有sql注入的风险，所以谨慎使用
    -->
    <select id="findUserByUserName" parameterType="java.lang.String" resultType="com.tae.old.User">
        SELECT * FROM user WHERE username like '%${value}%'
    </select>

    <!--#{}:如果传入的是pojo类型，那么#{}中的变量名称必须是pojo中对应的属性.属性.属性-
            如果要返回数据库自增主键：可以使用select LAST_INSERT_ID()
    -->
    <insert id="insertUser" parameterType="com.tae.old.User">
        <!--执行select LAST_INSERT_ID()数据库函数，返回自增的主键
          keyProperty:将返回的主键传入参数的id中保存
          order:当前函数相对于insert语句的执行顺序，在insert前执行是before，在insert后执行是after
          resultType:id的类型，也就是keyProperties中属性的类型
        -->
        <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
            select LAST_INSERT_ID()
        </selectKey>
        INSERT INTO user (username,birthday,sex,address) VALUES(#{username},#{birthday},#{sex},#{address})
    </insert>
</mapper>
